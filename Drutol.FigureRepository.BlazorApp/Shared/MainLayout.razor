@using Drutol.FigureRepository.BlazorApp.Util
@using Blazored.LocalStorage
@using Drutol.FigureRepository.BlazorApp.Interfaces.Figures
@using Drutol.FigureRepository.BlazorApp.Interfaces.Wallet
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using MudBlazor.Services
@inherits LayoutComponentBase

@inject ISyncLocalStorageService LocalStorageService
@inject IWalletProvider WalletProvider
@inject IFigureProvider FigureProvider
@inject IWebAssemblyHostEnvironment HostEnv
@inject IBreakpointService BreakpointService

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@DarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<style>
    .WalletButton {
        width: 250px;
    }

    .WalletButton span {
        flex-grow: 1;
        text-align: center;
    }
</style>

<MudLayout>
    <MudAppBar Elevation="2">
        <MudHidden Breakpoint="Breakpoint.SmAndUp" @bind-IsHidden="IsExtraSmall">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
            <div style="width: 10px"></div>
        </MudHidden>
        
        <a style="all: inherit;padding: 0" class="cursor-pointer" href="/">
            <MudImage Src="svg/logo/LogoWebThick.svg" Height="45"/>
            <div style="width: 10px"></div>
            <MudImage Src="@(DarkMode ? "svg/logo/LogoTextWhite.svg" : "svg/logo/LogoTextBlack.svg")" Height="40"/>
        </a>

        <MudSpacer/>
        @if (WalletProvider.CurrentWallet.HasValue && WalletProvider.CurrentWallet.Value.SelectedAccount.HasValue)
        {
            var account = WalletProvider.CurrentWallet.Value.SelectedAccount.Value;
            <MudStack Spacing="0" Class="ml-4 mr-6">
                <MudText Typo="Typo.button" Color="Color.Primary">My Address</MudText>
                <MudTooltip Text="@account.Address">
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@account.Address.TruncateAddress()</MudText>
                </MudTooltip>
            </MudStack>
        }
        <WalletConnectorButton/>
        <MudIconButton Icon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" Color="Color.Inherit" OnClick="@(e => DarkMode = !DarkMode)"/>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="@(IsExtraSmall ? DrawerVariant.Responsive : DrawerVariant.Persistent)" Breakpoint="Breakpoint.Xs" DisableOverlay="false">
        <CascadingValue Value="_wrapper">
            <NavMenu/>
        </CascadingValue>
    </MudDrawer>
    <MudMainContent Style="height: 100%">
        <CascadingValue Value="_wrapper">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {
        const string DarkModeStorageKey = "DarkMode";

    bool _drawerOpen = true;
    private bool _darkMode;
    private bool _isExtraSmall;
    private readonly ThemeWrapper _wrapper;

    public MainLayout()
    {
        _wrapper = new ThemeWrapper(_theme, () => DarkMode);
    }

    public bool IsExtraSmall
    {
        get => _isExtraSmall;
        set
        {
            _isExtraSmall = value;
            _drawerOpen = value;
        }
    }

    readonly MudTheme _theme = new()
    {
        Palette = new Palette
        {
            Primary = Colors.LightGreen.Default,
            Secondary = Colors.Yellow.Default,

            AppbarBackground = Colors.Shades.White,
            AppbarText = Colors.Shades.Black
        },
        PaletteDark =
        {
            Primary = Colors.LightGreen.Default,
            Secondary = Colors.Yellow.Default,

            DrawerBackground = "#202027"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        _ = Task.Run(async () =>
        {
            await FigureProvider.Initialize();
        });

        if (HostEnv.Environment == "Prerendering")
            return;

        IsExtraSmall = await BreakpointService.IsMediaSize(Breakpoint.SmAndUp);
        DarkMode = LocalStorageService.GetItem<bool>(DarkModeStorageKey);

        await WalletProvider.Initialize();

        WalletProvider.StateHasChanged += (sender, args) => StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public bool DarkMode
    {
        get => _darkMode;
        set
        {
            _darkMode = value;
            LocalStorageService.SetItem(DarkModeStorageKey, value);
            StateHasChanged();
        }
    }
}