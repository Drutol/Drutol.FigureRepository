@using MudBlazor
@using MudBlazor.Utilities
@using Drutol.FigureRepository.BlazorApp.Util
@inherits LayoutComponentBase

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@DarkMode"/>
<MudDialogProvider />
<MudSnackbarProvider />

<style>
    .LightAppBar {

    }
</style>

<MudLayout>
    <MudAppBar Elevation="2" Class="@(DarkMode ? string.Empty : "LightAppBar")">
        <MudHidden Breakpoint="Breakpoint.SmAndUp" @bind-IsHidden="IsExtraSmall">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
            <div style="width: 10px"></div>
        </MudHidden>

        <MudImage Src="svg/logo/LogoWebThick.svg" Height="45"/>
        <div style="width: 10px"></div>
        <MudImage Src="@(DarkMode ? "svg/logo/LogoTextWhite.svg" : "svg/logo/LogoTextBlack.svg")" Height="40"/>
        <MudSpacer/>
        <MudIconButton Icon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" Color="Color.Inherit" OnClick="@((e) => DarkMode = !DarkMode)"/>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="@(IsExtraSmall ? DrawerVariant.Responsive : DrawerVariant.Persistent)" Breakpoint="Breakpoint.Xs"  DisableOverlay="false">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="_wrapper">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;

    public bool IsExtraSmall
    {
        get => _isExtraSmall;
        set
        {
            _isExtraSmall = value;
            _drawerOpen = value;
        }
    }

    private readonly ThemeWrapper _wrapper;

    readonly MudTheme _theme = new MudTheme
    {
        Palette = new Palette
        {
            Primary = Colors.LightGreen.Default,
            AppbarBackground = Colors.Shades.White,
            AppbarText = Colors.Shades.Black,
        },
        PaletteDark =
        {
            Primary = Colors.LightGreen.Default,
        }
    };

    private bool _darkMode;
    private bool _isExtraSmall;

    public MainLayout()
    {
        _wrapper = new ThemeWrapper(_theme, () => DarkMode);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public bool DarkMode
    {
        get => _darkMode;
        set
        {
            _darkMode = value;
            StateHasChanged();
        }
    }

}