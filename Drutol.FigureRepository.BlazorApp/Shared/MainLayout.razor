@using Drutol.FigureRepository.BlazorApp.Util
@using MudBlazor
@using Blazored.LocalStorage
@inherits LayoutComponentBase

@inject ISyncLocalStorageService LocalStorageService

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="@DarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="2">
        <MudHidden Breakpoint="Breakpoint.SmAndUp" @bind-IsHidden="IsExtraSmall">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
            <div style="width: 10px"></div>
        </MudHidden>

        <MudImage Src="svg/logo/LogoWebThick.svg" Height="45"/>
        <div style="width: 10px"></div>
        <MudImage Src="@(DarkMode ? "svg/logo/LogoTextWhite.svg" : "svg/logo/LogoTextBlack.svg")" Height="40"/>
        <MudSpacer/>
        @if (WalletProvider.EthereumAvailable)
        {
            <MudStack Spacing="0" Class="ml-4 mr-6">
                <MudText Typo="Typo.button" Color="Color.Primary">My Address</MudText>
                <MudTooltip Text="@WalletProvider.SelectedAccountAddress">
                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@WalletProvider.SelectedAccountAddress.TruncateAddress()</MudText>
                </MudTooltip>
            </MudStack>
        }
        <MudMenu Size="Size.Large" PopoverClass="pr-2 pl-2" Class="mr-4">
            <ActivatorContent>
                <MudButton StartIcon="@Icons.Material.Outlined.AccountBalanceWallet" Color="Color.Inherit">Wallet</MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudButton OnClick="ConnectMetaMask">
                    <MudImage Src="svg/wallet/MetaMask.svg" Width="30" Height="30" Class="mr-2"/>
                    Connect MetaMask
                </MudButton>
                <MudButton OnClick="ConnectMetaMask">
                    <MudImage Src="svg/wallet/Gme.svg" Width="30" Height="30" Class="mr-2"/>
                    Connect GameStop
                </MudButton>
            </ChildContent>
        </MudMenu>
        <MudIconButton Icon="@(DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" Color="Color.Inherit" OnClick="@(e => DarkMode = !DarkMode)"/>
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="@(IsExtraSmall ? DrawerVariant.Responsive : DrawerVariant.Persistent)" Breakpoint="Breakpoint.Xs" DisableOverlay="false">
        <CascadingValue Value="_wrapper">
            <NavMenu/>
        </CascadingValue>
    </MudDrawer>
    <MudMainContent Style="height: 100%">
        <CascadingValue Value="_wrapper">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>

@code {
        const string DarkModeStorageKey = "DarkMode";

    bool _drawerOpen = true;
    private bool _darkMode;
    private bool _isExtraSmall;
    private readonly ThemeWrapper _wrapper;

    public bool IsExtraSmall
    {
        get => _isExtraSmall;
        set
        {
            _isExtraSmall = value;
            _drawerOpen = value;
        }
    }

    readonly MudTheme _theme = new()
    {
        Palette = new Palette
        {
            Primary = Colors.LightGreen.Default,
            Secondary = Colors.Yellow.Default,

            AppbarBackground = Colors.Shades.White,
            AppbarText = Colors.Shades.Black
        },
        PaletteDark =
        {
            Primary = Colors.LightGreen.Default,
            Secondary = Colors.Yellow.Default,

            DrawerBackground = "#202027"
        }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DarkMode = LocalStorageService.GetItem<bool>(DarkModeStorageKey);
    }

    public MainLayout()
    {
        _wrapper = new ThemeWrapper(_theme, () => DarkMode);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public bool DarkMode
    {
        get => _darkMode;
        set
        {
            _darkMode = value;
            LocalStorageService.SetItem(DarkModeStorageKey, value);
            StateHasChanged();
        }
    }

}