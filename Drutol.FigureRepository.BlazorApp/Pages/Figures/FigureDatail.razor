@page "/Figures/{Name}"

@using MudBlazor
@using Drutol.FigureRepository.BlazorApp.Infrastructure
@using Drutol.FigureRepository.BlazorApp.Models
@using Drutol.FigureRepository.BlazorApp.Models.Enums
@using Drutol.FigureRepository.BlazorApp.Util
@using Humanizer

@inject FigureProvider FigureProvider;
@inject IJSRuntime JS;

<component type="typeof(FigureDatail)" render-mode="WebAssembly" />

<MudBreadcrumbs Items="_breadcrumbs"/>

@if (Figure != null)
{
    <MudGrid Class="mt-2">
        <MudItem xs="12" sm="5" Class="pa-8 rounded" Style="@($"background-color: {Theme.Palette.BackgroundGrey}")">
            <MudText Typo="Typo.h4" Class="border-l-2 ml-4 pl-4 mud-border-primary">Gallery</MudText>
            <MudCarousel Id="Carousel" Style="height: 456px" ShowBullets="false" ShowArrows="true" AutoCycle="false" TData="object" @bind-SelectedIndex="CarouselSelectedIndex">
                @foreach (var photo in GalleryItems)
                {
                    <MudCarouselItem Transition="Transition.Slide" Class="pa-8 d-flex justify-center rounded">
                        <MudImage Src="@photo.Url" ObjectFit="ObjectFit.Cover" Class="rounded" Elevation="3" Height="400" @onclick="() => OpenGallery(CarouselSelectedIndex)"/>
                    </MudCarouselItem>
                }
            </MudCarousel>
            <MudPaper Class="d-flex pa-2 mr-4 ml-4" Elevation="0" Square="true" Style="justify-content: center">
                <MudChipSet @bind-SelectedChip="SelectedGalleryKind" Filter="true" Mandatory="true">
                    @{ var first = true; }
                    @foreach (var kind in Enum.GetValues<FigureMediaKind>().Reverse())
                    {
                        @if (Figure.Media.Any(media => media.MediaKind == kind))
                        {
                            <MudChip Tag="@kind" Color="Color.Primary" Variant="Variant.Filled" Default="@first">@kind.ToString()</MudChip>
                            first = false;
                        }
                    }
                </MudChipSet>
            </MudPaper>
            <MudGrid Spacing="0" Class="mt-2 justify-center" Justify="Justify.SpaceBetween" Style="max-height: 232px; overflow: auto">
                @foreach (var photo in GalleryItems)
                {
                    <MudItem Class="ma-2" Style="width: 100px; height: 100px;">
                        <MudButton Class="d-flex" Style="padding: 0px"
                                   Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="() => OpenGallery(GalleryItems.IndexOf(photo))"
                                   DisableElevation="false">
                            <MudImage Src="@photo.Url" ObjectFit="ObjectFit.Cover" Class="rounded align-center" Width="100" Height="100"/>
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudPaper Elevation="3" Class="pa-8 ma-8">
                <MudText Typo="Typo.h4" Class="border-l-2 pl-4 mud-border-primary">@Figure.Name</MudText>
                <MudText Typo="Typo.body1" Class="border-l-2 pl-4 mud-border-primary">@Figure.Description</MudText>
                <MudContainer Class="d-flex flex-wrap flex-row mt-4" Style="justify-content: center">
                    <MudItem xs="12" sm="7" Class="pb-4" Style="max-width: unset !important; flex-grow: 1 !important">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Filled.Straighten"/>
                                        <MudText Typo="Typo.h6" Align="Align.Center">Dimensions</MudText>
                                    </MudStack>
                                    <MudText Typo="Typo.body2"><strong>Width:</strong> @Figure.FigureDimensions.Width.ToString("N0") mm</MudText>
                                    <MudText Typo="Typo.body2"><strong>Height:</strong> @Figure.FigureDimensions.Height.ToString("N0") mm</MudText>
                                    <MudText Typo="Typo.body2"><strong>Length:</strong> @Figure.FigureDimensions.Length.ToString("N0") mm</MudText>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudTooltip Text="Maximum single part dimension at the default scale.">
                                            <MudText Typo="Typo.subtitle1" Align="Align.Center">
                                                <span class="border-b-2 border-dashed mud-border-primary">
                                                    Biggest Object
                                                </span>
                                            </MudText>
                                        </MudTooltip>
                                    </MudStack>
                                    <MudText Typo="Typo.body2"><strong>Width:</strong> @Figure.PrintDetails.BiggestPartDimension.Width.ToString("N0") mm</MudText>
                                    <MudText Typo="Typo.body2"><strong>Height:</strong> @Figure.PrintDetails.BiggestPartDimension.Height.ToString("N0") mm</MudText>
                                    <MudText Typo="Typo.body2"><strong>Length:</strong> @Figure.PrintDetails.BiggestPartDimension.Length.ToString("N0") mm</MudText>
                                </MudStack>
                            </MudItem>  
                            <MudItem xs="6">
                                <MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Filled.ViewInAr"/>
                                        <MudText Typo="Typo.h6" Align="Align.Center">Technicalities</MudText>
                                    </MudStack>
                                    <MudText Typo="Typo.body2"><strong>Blender Scene:</strong> @Figure.TechnicalStatistics.BlendFileSize.Bytes()</MudText>
                                    <MudText Typo="Typo.body2"><strong>Lychee Scenes:</strong> @Figure.TechnicalStatistics.LycheeScenesSize.Bytes()</MudText>
                                    <MudText Typo="Typo.body2"><strong>STLs:</strong> @Figure.TechnicalStatistics.StlsSize.Bytes()</MudText>
                                    <MudText Typo="Typo.body2"><strong>Vertices:</strong> @Figure.TechnicalStatistics.Vertices.ToMetric(MetricNumeralFormats.WithSpace, 2)
                                    </MudText>
                                    <MudText Typo="Typo.body2"><strong>Triangles:</strong> @Figure.TechnicalStatistics.Triangles.ToMetric(MetricNumeralFormats.WithSpace, 2)</MudText>
                                    <MudText Typo="Typo.body2"><strong>Faces:</strong> @Figure.TechnicalStatistics.Faces.ToMetric(MetricNumeralFormats.WithSpace, 2)</MudText>
                                </MudStack>
                            </MudItem>   
                            <MudItem xs="6">
                                <MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Filled.Print"/>
                                        <MudText Typo="Typo.h6" Align="Align.Center">Printing</MudText>
                                    </MudStack>
                                    <MudText Typo="Typo.body2"><strong>Number of parts: </strong> 
                                        @if (Figure.PrintDetails.MinNumberOfParts == Figure.PrintDetails.MaxNumberOfParts)
                                        {
                                            @Figure.PrintDetails.MaxNumberOfParts
                                        }
                                        else
                                        {
                                            <MudTooltip Text="Depending on your print max print volume there is variable number of parts prepared.">
                                                <span class="border-b-2 border-dashed mud-border-primary">
                                                    @($"{Figure.PrintDetails.MinNumberOfParts} - {Figure.PrintDetails.MaxNumberOfParts}")
                                                </span>
                                            </MudTooltip>
                                        }
                                    </MudText>
                                    <MudText Typo="Typo.body2"><strong>Clear Parts:</strong> @Figure.PrintDetails.NumberOfClearParts</MudText>
                                    <MudText Typo="Typo.body2"><strong>Print Batches:</strong> @Figure.PrintDetails.NumberOfPrintBatches</MudText>
                                    <MudText Typo="Typo.body2"><strong>Resin - Parts:</strong> @Figure.PrintDetails.PrintResinVolumeParts ml</MudText>
                                    <MudText Typo="Typo.body2"><strong>Resin - Supports:</strong> @Figure.PrintDetails.PrintResinVolumeSupports ml</MudText>
                                    <MudText Typo="Typo.body2"><strong>Resin - Total:</strong> @(Figure.PrintDetails.PrintResinVolumeParts + Figure.PrintDetails.PrintResinVolumeSupports) ml</MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="6">
                                <MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudIcon Icon="@Icons.Filled.Link"/>
                                        <MudText Typo="Typo.h6" Align="Align.Center">External Links</MudText>
                                    </MudStack>
                                    @foreach (var link in Figure.ExternalLinks)
                                    {
                                        <MudLink Href="@link.Url">@link.Type.ToString()</MudLink>
                                    }
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudItem>   
                    <MudItem xs="12" sm="5" Style="max-width: unset !important;">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudIcon Icon="@Icons.Filled.EventRepeat"/>
                            <MudText Typo="Typo.h6" Align="Align.Center">Timeline</MudText>
                        </MudStack>
                        <MudTimeline TimelinePosition="TimelinePosition.Alternate">
                            @foreach (var step in Figure.Timeline.OrderBy(entry => entry.Date))
                            {
                                <MudTimelineItem Size="@(step.Event switch{
                                                           FigureTimelineEvent.Publish=> Size.Large,
                                                           FigureTimelineEvent.ProjectInception => Size.Medium,
                                                           _=>Size.Small })"
                                                 Color="@(step.Event switch{
                                                            FigureTimelineEvent.Publish=> Color.Primary,
                                                            FigureTimelineEvent.ProjectInception => Color.Info,
                                                            _=> Color.Default })">
                                    <MudText Typo="Typo.button">@step.Event</MudText>
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">@step.Date</MudText>
                                </MudTimelineItem>
                            }
                        </MudTimeline>
                    </MudItem>
                </MudContainer>
            </MudPaper>
        </MudItem>
    </MudGrid>
}
else
{
    <MudText>Not Found</MudText>
}


@code {
    [CascadingParameter]
    protected ThemeWrapper Theme { get; set; }

    [Parameter]
    public string Name { get; set; }

    public List<FigureMedia> GalleryItems { get; set; } = new();

    public Figure? Figure { get; set; }

    public int CarouselSelectedIndex { get; set; }
    private MudChip? _selectedGalleryKindChip;

    private readonly List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", "/", false, "home"),
        new BreadcrumbItem("Figures", "/Figures")
    };

    public MudChip? SelectedGalleryKind
    {
        get => _selectedGalleryKindChip;
        set
        {
            _selectedGalleryKindChip = value;
            RefreshGallery();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        //await Task.Delay(10);

        _selectedGalleryKindChip = null;
        if(_breadcrumbs.Count == 3)
            _breadcrumbs.RemoveAt(2);
        _breadcrumbs.Add(new BreadcrumbItem(Name, $"/Figures/{Name}"));
        Figure = FigureProvider.Figures.FirstOrDefault(figure => figure.Name.Equals(Name));
        RefreshGallery();
    }


    private void RefreshGallery()
    {
        if(Figure == null)
            return;

        var kind = (FigureMediaKind?)_selectedGalleryKindChip?.Tag ?? Figure.Media.Select(media => media.MediaKind).MaxBy(mediaKind => (int)mediaKind);
        GalleryItems = Figure.Media.Where(media => media.MediaKind == kind).ToList();
    }

    private void OpenGallery(int index)
    {
        GalleryItems.OpenGallery(JS, index);
    }
}
