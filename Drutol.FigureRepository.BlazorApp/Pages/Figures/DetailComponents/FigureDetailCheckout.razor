@using Drutol.FigureRepository.BlazorApp.Interfaces.Http
@using Drutol.FigureRepository.BlazorApp.Interfaces
@using Drutol.FigureRepository.BlazorApp.Interfaces.Figures
@using Drutol.FigureRepository.BlazorApp.Interfaces.Wallet
@using Drutol.FigureRepository.BlazorApp.Util
@using MudBlazor
@using Drutol.FigureRepository.Shared.Models.Figure
@using Drutol.FigureRepository.Shared.Checkout
@using Drutol.FigureRepository.Shared.Blockchain.Loopring
@using Drutol.FigureRepository.Shared.Blockchain
@using Drutol.FigureRepository.Shared.Download
@using Drutol.FigureRepository.Shared.Models.Enums
@using Functional.Maybe

@inject IJSRuntime JS
@inject IApiHttpClient HttpClient
@inject IWalletProvider WalletProvider
@inject ILoopringHttpClient LoopringHttpClient
@inject ILogger<FigureDetailCheckout> Logger
@inject IFigureDownloadTokenManager DownloadTokenManager

<MudPaper Elevation="2" Square="false" Class="ml-8 mr-8 mt-8" >
    <MudToolBar>
        <div class="mud-theme-primary py-2 px-6 rounded-tr-xl rounded-bl-xl">
            <MudText Align="Align.Center" Typo="Typo.h5" Style="color: white">$@Figure.CheckoutDetails.Price.ToString("N2")</MudText>
        </div>

        <MudSpacer />
        <MudMenu Size="Size.Large" AnchorOrigin="Origin.BottomCenter" PopoverClass="pr-2 pl-2">
            <ActivatorContent>
                <MudButton Disabled="!IsFigureOwned" StartIcon="@Icons.Material.Outlined.Download" Size="Size.Large" OnClick="PrepareDownloads">Download</MudButton>
            </ActivatorContent>
            <ChildContent>
                @if (DownloadsReady)
                {
                    <MudStack>
                        @foreach (var resource in Figure.DownloadResources)
                        {
                            <MudButton Href="@DownloadUrls![resource.Type]"
                                       download="@($"{Figure.Name}{resource.Type}.{resource.Format.Str()}")">
                                <MudImage Width="50" Class="mr-4" Src="@GetIconSrcForResource(resource)"></MudImage>
                                <MudStack AlignItems="AlignItems.Center" Spacing="0">
                                    <MudText>
                                        @resource.Type.Str()
                                    </MudText>
                                    <MudTooltip>
                                        <MudText Typo="Typo.caption">
                                            <b>SHA256: </b> @(resource.Sha256.Substring(0, 9))...
                                        </MudText>
                                    </MudTooltip>
                                </MudStack>
                            </MudButton>
                        }
                    </MudStack>
                }
                else
                {
                    <MudProgressCircular Indeterminate="true" Size="Size.Large"/>
                }
            </ChildContent>
        </MudMenu>
        @if (IsFigureOwned)
        {
            <MudTooltip Text="You own at least one NFT of this figure.">
                <MudFab Class="ml-2" StartIcon="@Icons.Filled.Check" Color="Color.Success" Size="Size.Small"/>
            </MudTooltip>
        }
        else if (FailedToDetermineOwnership)
        {
            <MudTooltip Text="Error occured when determining ownership, click to retry.">
                <MudFab Class="ml-2" StartIcon="@Icons.Filled.Replay" Color="Color.Warning" Size="Size.Small" OnClick="UpdateOwnership"/>
            </MudTooltip>
        }
        else
        {
            <MudMenu @ref="PurchaseMenu" Size="Size.Large" AnchorOrigin="Origin.BottomCenter" PopoverClass="BuyMenuPopover pr-2 pl-2">
                <ActivatorContent>
                    <MudButton Class="ml-2" StartIcon="@Icons.Filled.AddShoppingCart" Color="Color.Info" Size="Size.Large" OnClick="OnBuyMenuOpened">
                        Purchase
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    @if (CanPurchase)
                    {
                        <MudStack>
                            <MudButton Variant="Variant.Filled" Style="background-color: black; color: white">
                                <MudImage Src="svg/wallet/Gme.svg"></MudImage>
                                <span style="text-align: center; flex-grow: 1">
                                    GameStop Marketplace
                                </span>
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Style="background-color: #41a48f; color: white">
                                <MudImage Src="svg/vendor/Cgtrader.svg"></MudImage>
                                <span style="text-align: center; flex-grow: 1">
                                    CgTrader
                                </span>
                            </MudButton>
                            @if (!PaypalOrderReady)
                            {
                                <MudProgressCircular Style="place-self: center" Color="Color.Primary" Indeterminate="true"/>
                                <MudText Align="Align.Center">PayPal Loading...</MudText>
                            }
                            <div id="paypal-buttons"></div>
                        </MudStack>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="ma-2" Style="color: var(--mud-palette-text-primary)">
                            Please connect your wallet first in order to connect.
                            <br/>
                            You can do it by clicking the button in the top right corner of the screen.
                        </MudAlert>
                    }
                </ChildContent>
            </MudMenu>
        }
    </MudToolBar>
    @if (IsLoading)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Secondary"/>
    }
</MudPaper>

@code {
    [Parameter]
    public Figure Figure { get; set; }

    public bool PaypalOrderReady { get; set; }
    public bool IsFigureOwned { get; set; }
    public bool IsLoading { get; set; }
    public bool FailedToDetermineOwnership { get; set; }
    public bool CanPurchase { get; set; }
    public bool DownloadsReady { get; set; }

    public MudMenu PurchaseMenu { get; set; }
    public Dictionary<FigureDownloadType, string>? DownloadUrls { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        WalletProvider.StateHasChanged += WalletProviderOnStateHasChanged;
    }

    private async void WalletProviderOnStateHasChanged(object? sender, EventArgs e)
    {
        await UpdateOwnership();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await UpdateOwnership();
    }

    #region PayPal

    [JSInvokable]
    public async Task SubmitPaypalOrder(string orderId)
    {
        var result = await HttpClient.Client.PostAsJsonAsync("api/checkout/transaction", new CheckoutTransactionRequest(orderId));
        var response = await result.Content.ReadFromJsonAsync<CheckoutTransactionResponse>();

        if (response.Status is CheckoutTransactionResponse.StatusCode.Ok or CheckoutTransactionResponse.StatusCode.DeliveryPending)
        {
            await DownloadTokenManager.SetDownloadTokenForFigure(Figure, response.TokenResponse);
            IsFigureOwned = true;
            StateHasChanged();
        }

        PurchaseMenu.CloseMenu();
    }   
    
    [JSInvokable]
    public async Task PaypalButtonClicked()
    {

    }

    private async void OnBuyMenuOpened(MouseEventArgs obj)
    {
        if (!CanPurchase)
        {
            WalletProvider.RequestWalletPrompt();
            return;
        }

        PaypalOrderReady = false;
        StateHasChanged();
        var reference = DotNetObjectReference.Create(this);
        var response = await HttpClient.Client.PostAsJsonAsync(
            "api/checkout/order",
            new CheckoutOrderRequest(Figure.Guid, WalletProvider.CurrentWallet.Value.SelectedAccount.Value.Address));
        var result = await response.Content.ReadFromJsonAsync<CheckoutOrderResponse>();

        await JS.InvokeVoidAsync("openPayPal", reference, result.OrderId);

        await Task.Delay(500);
        PaypalOrderReady = true;
        StateHasChanged();
    }

    #endregion


    #region Ownership

    private async Task UpdateOwnership()
    {
        try
        {
            IsLoading = true;

            if (!WalletProvider.CurrentWallet.SelectOrElse(connector => connector.SelectedAccount.HasValue, () => false))
            {
                IsFigureOwned = false;
                CanPurchase = false;
                return;
            }

            CanPurchase = true;

            try
            {
                //var sha = Sha3Keccack.Current.CalculateHash("balanceOf(address)");
                //var methodSignature = sha.Substring(0, 8); //first 4 bytes make the function signature
                //var methodArgument = SelectedAccountAddress[2..].PadLeft(64, '0'); //arguments have to be encoded as 32 bytes
                //var result = (JsonElement)await _metaMaskService.GenericRpc("eth_call", new
                //{
                //    to = Figure.NftDetails.TokenAddress,
                //    data = $"0x{methodSignature}{methodArgument}"
                //}, "latest");
                //var amount = (int)result.GetString().HexToBigInteger(false);

                //ethereum.request({
                //    method: 'personal_sign',
                //        params: ['Sign this message to access Loopring Exchange: 0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4 with key nonce: 0', '0x59eb7c1e8e357ef2b4eb7532cab64c6538292ac6']
                //});

                var loopringAccountResponse = await GetLoopringAccount( WalletProvider.CurrentWallet.Value.SelectedAccount.Value.Address);
                if (loopringAccountResponse is IAccountResponseModel.Success loopringAccount)
                {
                    using var authStartContent = JsonContent.Create(new StartAuthenticationRequest(
                        StartAuthenticationRequest.AuthenticationType.Loopring,
                        (int)WalletProvider.CurrentWallet.Value.SelectedAccount.Value.ChainId,
                        WalletProvider.CurrentWallet.Value.SelectedAccount.Value.Address,
                        Figure.Guid));

                    var response = await
                        (await HttpClient.Client.PostAsync("/api/auth/StartAuthentication", authStartContent))
                            .Content
                            .ReadFromJsonAsync<StartAuthenticationResult>();

                    var signature = await WalletProvider.CurrentWallet.Value.PersonalSign(response.DataToSign);

                    var authFinishContent = JsonContent.Create(new FinishAuthenticationRequest(response.SessionGuid, signature));
                    var auth = await
                        (await HttpClient.Client.PostAsync("/api/auth/FinishAuthentication", authFinishContent))
                            .Content
                            .ReadFromJsonAsync<FinishAuthenticationResult>();

                    Logger.LogInformation($"Ownership authentication result: {auth.Status}");

                    if (auth.Status == FinishAuthenticationResult.StatusCode.Ok)
                    {
                        await DownloadTokenManager.SetDownloadTokenForFigure(Figure, auth.TokenResponse);
                        IsFigureOwned = true;
                    }
                    else
                    {
                        IsFigureOwned = false;
                    }

                    FailedToDetermineOwnership = false;
                }
                else
                {
                    IsFigureOwned = false;
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Failed to update ownership.");
                IsFigureOwned = false;
                FailedToDetermineOwnership = true;
            }
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async ValueTask<IAccountResponseModel> GetLoopringAccount(string walletAddress)
    {
        try
        {
            var result = await LoopringHttpClient.Client
                .GetFromJsonAsync<IAccountResponseModel.Success>($"account?owner={walletAddress}")
                .ConfigureAwait(false);

            if (result == null)
                return new IAccountResponseModel.Fail();

            return result;
        }
        catch (Exception e)
        {
            return new IAccountResponseModel.Fail();
        }
    }

    #endregion

    #region Download

    private async Task PrepareDownloads()
    {
        if(DownloadUrls != null)
            DownloadUrls.Clear();

        DownloadsReady = false;
        var token = await DownloadTokenManager.GetDownloadTokenForFigure(Figure);

        if(token == default)
            await UpdateOwnership();

        if (IsFigureOwned)
        {
            token = await DownloadTokenManager.GetDownloadTokenForFigure(Figure);
            if (token != default)
            {
                var result = await HttpClient.Client.PostAsJsonAsync("download/downloadData", new DownloadFigureRequest(Figure.Guid, token.JwtToken));
                var response = await result.Content.ReadFromJsonAsync<DownloadFigureResponse>();

                if (response.Success)
                {
                    DownloadUrls = response.DownloadUrls;
                    DownloadsReady = true;
                }
                else
                {
                    
                }
            }
            else
            {
                IsFigureOwned = false;
            }
        }
    }

    private string GetIconSrcForResource(FigureDownloadResource resource)
    {
        return resource.Type switch 
        {
            FigureDownloadType.BlenderScene => "images/Logo/BlenderLogo.png",
            FigureDownloadType.SlicedScenes => "images/Logo/LycheeLogo.png",
            FigureDownloadType.Stls => "images/Logo/Stl.png",
            _ => throw new ArgumentOutOfRangeException()
        };
    }

    #endregion



}
