@using Drutol.FigureRepository.BlazorApp.Interfaces.Http
@using Drutol.FigureRepository.BlazorApp.Interfaces
@using Drutol.FigureRepository.BlazorApp.Interfaces.Figures
@using Drutol.FigureRepository.BlazorApp.Interfaces.Wallet
@using Drutol.FigureRepository.BlazorApp.Util
@using MudBlazor
@using Drutol.FigureRepository.Shared.Models.Figure
@using Drutol.FigureRepository.Shared.Checkout
@using Drutol.FigureRepository.Shared.Blockchain.Loopring
@using Drutol.FigureRepository.Shared.Blockchain
@using Drutol.FigureRepository.Shared.Download
@using Drutol.FigureRepository.Shared.Models.Enums
@using Functional.Maybe
@using Drutol.FigureRepository.BlazorApp.Dialogs
@using Drutol.FigureRepository.Shared.Models.Figure.Enums

@implements IDisposable

@inject IJSRuntime JS
@inject IApiHttpClient HttpClient
@inject IWalletProvider WalletProvider
@inject ILoopringHttpClient LoopringHttpClient
@inject ILogger<FigureDetailCheckout> Logger
@inject IFigureDownloadTokenManager DownloadTokenManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    .BuyMenuPopover {
        width: 400px
    }

    .Toolbar {
        flex-wrap: wrap;
        height: auto;
        gap: 4px 4px;
        justify-content: space-around;
    }
    
    .ToolbarSpacer {
        flex-grow: 1;
    }
</style>

<MudPaper Elevation="2" Square="false" Class="ml-8 mr-8 mt-8" >
    <MudToolBar Class="Toolbar pa-2">
        <div class="mud-theme-primary py-2 px-6 rounded-tr-xl rounded-bl-xl mud-elevation-2">
            <MudText Align="Align.Center" Typo="Typo.h5" Style="color: white">$@Figure.CheckoutDetails.Price.ToString("N2")</MudText>
        </div>

        <div class="ToolbarSpacer" />
        <MudMenu Size="Size.Large" AnchorOrigin="Origin.BottomCenter" PopoverClass="pr-2 pl-2" Disabled="@(!IsFigureOwned || IsLoading)">
            <ActivatorContent>
                @if (!IsFigureOwned || IsLoading)
                {
                    <MudTooltip Text="Make sure to connect your wallet if you want to download." >
                        <MudButton Disabled="true" StartIcon="@Icons.Material.Outlined.Download" Size="Size.Large">Download</MudButton>
                    </MudTooltip>
                }
                else
                {
                    <MudButton Disabled="false" StartIcon="@Icons.Material.Outlined.Download" Size="Size.Large" OnClick="PrepareDownloads">Download</MudButton>
                }
            </ActivatorContent>
            <ChildContent>
                @if (DownloadsReady)
                {
                    <MudStack Style="width: 250px">
                        @foreach (var resource in Figure.DownloadResources)
                        {
                            <MudButton Href="@DownloadUrls![resource.Type]"
                                       download="@($"{Figure.Name}{resource.Type}.{resource.Format.Str()}")">
                                <MudImage Width="50" Class="mr-4" Src="@GetIconSrcForResource(resource)"></MudImage>
                                <MudSpacer/>
                                <MudStack AlignItems="AlignItems.Center" Spacing="0">
                                    <MudText>
                                        @resource.Type.Str()
                                    </MudText>
                                    <MudTooltip Text="@resource.Sha256">
                                        <MudText Typo="Typo.caption">
                                            <b>SHA256: </b> @(resource.Sha256.Substring(0, 9))...
                                        </MudText>
                                    </MudTooltip>
                                </MudStack>
                            </MudButton>
                        }
                    </MudStack>
                }
                else
                {
                    <MudStack Style="width: 250px" AlignItems="AlignItems.Center">
                        <MudProgressCircular  Indeterminate="true" Size="Size.Large" Class="ma-8" Color="Color.Primary" />
                    </MudStack>
                }
            </ChildContent>
        </MudMenu>
        @if (IsLoading)
        {
            <MudTooltip Text="Updating ownership status.">
                <MudFab StartIcon="@Icons.Filled.HourglassTop" Color="Color.Success" Size="Size.Small"/>
            </MudTooltip>
        }  
        else if (IsFigureOwned)
        {
            <MudTooltip Text="You own at least one NFT of this figure.">
                <MudFab StartIcon="@Icons.Filled.Check" Color="Color.Success" Size="Size.Small"/>
            </MudTooltip>
        }
        else if (FailedToDetermineOwnership)
        {
            <MudTooltip Text="Error occured when determining ownership, click to retry.">
                <MudFab StartIcon="@Icons.Filled.Replay" Color="Color.Warning" Size="Size.Small" OnClick="UpdateOwnership"/>
            </MudTooltip>
        }
        else
        {
            <MudMenu @ref="PurchaseMenu" Size="Size.Large" AnchorOrigin="Origin.BottomCenter" PopoverClass="BuyMenuPopover pr-2 pl-2">
                <ActivatorContent>
                    <MudButton StartIcon="@Icons.Filled.AddShoppingCart" Color="Color.Warning" Size="Size.Large" OnClick="() => OnBuyMenuOpened(true)">
                        Purchase
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="ml-2">
                        <MudText Typo="Typo.h5" Align="Align.Left" Style="flex-grow: 1">Purchase</MudText>
                        <MudSpacer/>
                        <MudFab Class="ma-2" StartIcon="@Icons.Filled.Info" Color="Color.Primary" Size="Size.Small" OnClick="ShowPurchaseInfoDialog"/>
                    </MudStack>
                    @if (CanPurchase)
                    {
                        <MudStack Class="ml-2 mr-2">
                            @foreach (var option in Figure.ExternalPurchaseOptions)
                            {
                                <CheckoutPurchaseButton Option="option"/>
                            }
                            @if (!PaypalOrderReady)
                            {
                                <MudProgressCircular Style="place-self: center" Color="Color.Primary" Indeterminate="true"/>
                                <MudText Align="Align.Center">PayPal Loading...</MudText>
                            }
                            <CheckoutPurchaseButton Option="_dummyPayPalPurchaseOption" Disabled="true" />
                            <MudText>Coming soon...</MudText>
                            @*<div id="paypal-buttons" style="@(!PaypalOrderReady ? "display: none;" : string.Empty)"></div>*@
                        </MudStack>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="ml-2 mr-2 mt-2" Style="color: var(--mud-palette-text-primary)">
                            More purchase options coming soon...
                            @*                            
                                Connect your wallet first in order to access all purchase options.
                            <br/>
                            <br/>
                            You can do it by clicking the button in the top right corner of the page.*@
                        </MudAlert>
                        <MudDivider Class="ma-2"/>
                        <MudStack Class="ma-2">
                            @foreach (var option in Figure.ExternalPurchaseOptions.Concat(new[] { _dummyPayPalPurchaseOption }))
                            {
                                <CheckoutPurchaseButton Option="option" Disabled="@option.RequiresWallet"/>
                            }
                        </MudStack>
                    }
                </ChildContent>
            </MudMenu>
        }
    </MudToolBar>
    @if (IsLoading)
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Secondary"/>
    }
</MudPaper>

<MudOverlay Visible="@IsOrderProcessing" ZIndex="9999" AutoClose="false" DarkBackground="@Theme.IsDarkMode" LightBackground="@(!Theme.IsDarkMode)">
    <MudPaper Class="pa-4" Elevation="4">
        <MudStack AlignItems="AlignItems.Center">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
            <MudText>Your order is now being processed...</MudText>
        </MudStack>
    </MudPaper>
</MudOverlay>

@code {

    private readonly FigureExternalPurchaseOption _dummyPayPalPurchaseOption = new(FigureExternalPurchaseOptionType.PayPal, "", true);

    [CascadingParameter]
    protected ThemeWrapper Theme { get; set; }

    [Parameter]
    public Figure Figure { get; set; }

    public bool PaypalOrderReady { get; set; }
    public bool IsFigureOwned { get; set; }
    public bool IsLoading { get; set; }
    public bool FailedToDetermineOwnership { get; set; }
    public bool CanPurchase { get; set; }
    public bool DownloadsReady { get; set; }
    public bool IsOrderProcessing { get; set; }

    private SemaphoreSlim _semaphore = new(1);
    private Guid _checkedOwnershipAfterParametersSet;
    private CancellationTokenSource _cts;

    public MudMenu PurchaseMenu { get; set; }
    public Dictionary<FigureDownloadType, string>? DownloadUrls { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        WalletProvider.StateHasChanged += WalletProviderOnStateHasChanged;
    }

    private async void WalletProviderOnStateHasChanged(object? sender, EventArgs e)
    {
        await UpdateOwnership();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Figure.Guid != _checkedOwnershipAfterParametersSet)
        {
            _checkedOwnershipAfterParametersSet = Figure.Guid;
            await UpdateOwnership();
        }
    }

    #region PayPal

    [JSInvokable]
    public async Task SubmitPaypalOrder(string orderId)
    {
        try
        {
            IsOrderProcessing = true;
            StateHasChanged();

            var result = await HttpClient.Client.PostAsJsonAsync("api/order/transaction", new CheckoutTransactionRequest(orderId));
            var response = await result.Content.ReadFromJsonAsync<CheckoutTransactionResponse>();

            if (response.Status is CheckoutTransactionResponse.StatusCode.Ok or CheckoutTransactionResponse.StatusCode.DeliveryPending)
            {
                await DownloadTokenManager.SetDownloadTokenForFigure(Figure, response.TokenResponse);
                IsFigureOwned = true;
            }

            PurchaseMenu.CloseMenu();
        }
        finally
        {
            IsOrderProcessing = false;
            StateHasChanged();
        }
    }   
    
    [JSInvokable]
    public async Task PaypalButtonsInitialized()
    {
        PaypalOrderReady = true;
        StateHasChanged();
    }

    private async void OnBuyMenuOpened(bool fromButton)
    {
        if (!CanPurchase)
        {
            //if(fromButton)
            //    WalletProvider.RequestWalletPrompt();
            return;
        }

        PaypalOrderReady = false;

        try
        {
            //var reference = DotNetObjectReference.Create(this);
            //var response = await HttpClient.Client.PostAsJsonAsync(
            //    "api/order/order",
            //    new CheckoutOrderRequest(Figure.Guid, WalletProvider.CurrentWallet.Value.SelectedAccount.Value.Address));
            //var result = await response.Content.ReadFromJsonAsync<CheckoutOrderResponse>();

            //await JS.InvokeVoidAsync("openPayPal", reference, result.OrderId);
        }
        catch (Exception e)
        {
            Logger.LogError(e, "Failed to prepare order.");
            Snackbar.Add("Failed to prepare PayPal order. Try again later.");
            PaypalOrderReady = true;
        }
    }

    #endregion


    #region Ownership

    private async Task UpdateOwnership()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        await _semaphore.WaitAsync();

        var token = _cts.Token;
        if(IsLoading)
            return;

        try
        {
            IsLoading = true;

            if (!WalletProvider.CurrentWallet.SelectOrElse(connector => connector.SelectedAccount.HasValue, () => false))
            {
                IsFigureOwned = false;
                CanPurchase = false;
                return;
            }

            CanPurchase = true;

            StateHasChanged();

            try
            {
    //var sha = Sha3Keccack.Current.CalculateHash("balanceOf(address)");
    //var methodSignature = sha.Substring(0, 8); //first 4 bytes make the function signature
    //var methodArgument = SelectedAccountAddress[2..].PadLeft(64, '0'); //arguments have to be encoded as 32 bytes
    //var result = (JsonElement)await _metaMaskService.GenericRpc("eth_call", new
    //{
    //    to = Figure.NftDetails.TokenAddress,
    //    data = $"0x{methodSignature}{methodArgument}"
    //}, "latest");
    //var amount = (int)result.GetString().HexToBigInteger(false);

    //ethereum.request({
    //    method: 'personal_sign',
    //        params: ['Sign this message to access Loopring Exchange: 0x0BABA1Ad5bE3a5C0a66E7ac838a129Bf948f1eA4 with key nonce: 0', '0x59eb7c1e8e357ef2b4eb7532cab64c6538292ac6']
    //});

                var loopringAccountResponse = await GetLoopringAccount(WalletProvider.CurrentWallet.Value.SelectedAccount.Value.Address, token);
                if (loopringAccountResponse is IAccountResponseModel.Success loopringAccount)
                {
                    using var authStartContent = JsonContent.Create(new StartAuthenticationRequest(
                        StartAuthenticationRequest.AuthenticationType.Loopring,
                        (int)WalletProvider.CurrentWallet.Value.SelectedAccount.Value.ChainId,
                        WalletProvider.CurrentWallet.Value.SelectedAccount.Value.Address,
                        Figure.Guid));

                    var response = await
                        (await HttpClient.Client.PostAsync("/api/auth/StartAuthentication", authStartContent, token))
                            .Content
                            .ReadFromJsonAsync<StartAuthenticationResult>(cancellationToken: token);

                    var signature = await WalletProvider.CurrentWallet.Value.PersonalSign(response.DataToSign);

                    var authFinishContent = JsonContent.Create(new FinishAuthenticationRequest(response.SessionGuid, signature));
                    var auth = await
                        (await HttpClient.Client.PostAsync("/api/auth/FinishAuthentication", authFinishContent, token))
                            .Content
                            .ReadFromJsonAsync<FinishAuthenticationResult>(cancellationToken: token);

                    Logger.LogInformation($"Ownership authentication result: {auth.Status}");

                    if (auth.Status == FinishAuthenticationResult.StatusCode.Ok)
                    {
                        await DownloadTokenManager.SetDownloadTokenForFigure(Figure, auth.TokenResponse);
                        IsFigureOwned = true;
                    }
                    else
                    {
                        IsFigureOwned = false;
                    }

                    FailedToDetermineOwnership = false;
                }
                else
                {
                    IsFigureOwned = false;
                }
            }
            catch (Exception) when (token.IsCancellationRequested)
            {
                Logger.LogInformation("Cancelled ownership update.");
            }
            catch (Exception e)
            {
                Logger.LogError(e, "Failed to update ownership.");
                IsFigureOwned = false;
                FailedToDetermineOwnership = true;
            }
        }
        finally
        {
            IsLoading = false;
            _semaphore.Release();
            StateHasChanged();
        }
    }

    private async ValueTask<IAccountResponseModel> GetLoopringAccount(string walletAddress, CancellationToken cancellationToken)
    {
        try
        {
            var result = await LoopringHttpClient.Client
                .GetFromJsonAsync<IAccountResponseModel.Success>($"account?owner={walletAddress}")
                .ConfigureAwait(false);

            if (result == null)
                return new IAccountResponseModel.Fail();

            return result;
        }
        catch (Exception e)
        {
            return new IAccountResponseModel.Fail();
        }
    }

    #endregion

    #region Download

    private async void PrepareDownloads()
    {
        if(DownloadUrls != null)
            DownloadUrls.Clear();

        DownloadsReady = false;
        StateHasChanged();
        var token = await DownloadTokenManager.GetDownloadTokenForFigure(Figure);

        if(token == default)
            await UpdateOwnership();

        if (IsFigureOwned)
        {
            token = await DownloadTokenManager.GetDownloadTokenForFigure(Figure);
            if (token != default)
            {
                var result = await HttpClient.Client.PostAsJsonAsync("api/download/downloadData", new DownloadFigureRequest(Figure.Guid, token.JwtToken));
                var response = await result.Content.ReadFromJsonAsync<DownloadFigureResponse>();

                if (response.Success)
                {
                    DownloadUrls = response.DownloadUrls;
                    DownloadsReady = true;
                }
                else
                {
                    Logger.LogError($"Failed to obtain download links.");
                }
            }
            else
            {
                IsFigureOwned = false;
            }
        }

        StateHasChanged();
    }

    private string GetIconSrcForResource(FigureDownloadResource resource)
    {
        return resource.Type switch 
        {
            FigureDownloadType.BlenderScene => "images/Logo/BlenderLogo.png",
            FigureDownloadType.SlicedScenes => "images/Logo/LycheeLogo.png",
            FigureDownloadType.Stls => "images/Logo/Stl.png",
            _ => throw new ArgumentOutOfRangeException()
        };
    }    

    #endregion

    private void ShowPurchaseInfoDialog()
    {
        DialogService.Show<PurchaseInfoDialog>("Purchasing information");
    }

    public void Dispose()
    {
        WalletProvider.StateHasChanged -= WalletProviderOnStateHasChanged;
    }
}
